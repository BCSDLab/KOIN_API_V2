name: Flyway Dangerous SQL Validator
# 블루/그린 배포 환경에서 기존 WAS와 DB의 스키마 불일치하는 오류를 방지한다.

on:
  pull_request:
    paths:
      - "**"

jobs:
  check-flyway-dangerous-sql:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate Dangerous SQL and Non-Flyway Changes
        run: |
          BASE=${{ github.event.pull_request.base.sha }}
          HEAD=${{ github.event.pull_request.head.sha }}
          
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD")
          
          NON_FLYWAY_FILES_CHANGES=$(echo "$CHANGED_FILES" \
            | grep -v '^src/main/resources/db/migration/' || true)
          
          DANGEROUS_SQL=$(git diff --unified=0 "$BASE" "$HEAD" -- src/main/resources/db/migration/*.sql \
            | grep -i -wE "^\+.*\b(DROP|TRUNCATE|RENAME|CHANGE)\b" || true)
          
          if [[ -n "$DANGEROUS_SQL" && -n "$NON_FLYWAY_FILES_CHANGES" ]]; then
            echo "::error::코드 변경사항과 파괴적 SQL 명령이 동시에 감지되었습니다."
            echo ""
            echo "🔴 감지된 위험 SQL 내용:"
          
            # 🔽 sed 방식이 더 안정적
            echo "$DANGEROUS_SQL" \
              | sed -n -E 's/^diff --git a\/.* b\/(.*)/📄 \1:/p; s/^\+(.+)/    \1/p'
          
            exit 1
          fi
    
